/* Query #1: Create an AFTER trigger in the flights table for the INSERT, UPDATE events, 
that restricts the insertion or modification in the date column of dates before 2016 and after the year 2019. */
go
Create trigger DateRestriction
on flights
INSTEAD OF insert, update
as
BEGIN
IF (SELECT year(i.date) FROM inserted AS i) < 2016 OR (SELECT year(i.date) FROM inserted AS i) > 2019
RAISERROR(15600, -1, -1,'Date out of Range')
END

/* Query #2: Create an INSTEAD OF trigger in the planes table for the INSERT, UPDATE, DELETE events, 
that restricts the input, modification or deletion of rows in the table and 
shows the message "Input, modification or deletion of rows not allowed"*/
go
Create trigger RowRestriction
on planes
instead of insert, update, delete
as
begin
raiserror(15600, -1, -1, 'Input, modification or deletion of rows not allowed')
END

/* Query #3: Create an INSTEAD OF trigger in the tickets table for the UPDATE event,
that restricts the update of values in the final_price column that are 20% higher or
lower than the corresponding value for the combination of route and cabin type in the
price column of the routes_cabin_types table. If the value does not meet the given requirement,
then the operation will be cancelled. */

/*go
CREATE TRIGGER FinalPriceRestriction
ON tickets
INSTEAD OF UPDATE
AS
SET NOCOUNT ON
BEGIN
DECLARE @min_price REAL, @max_price REAL, @ins REAL
SET @min_price = (SELECT rct.price * 0.8 AS bottom_price
FROM routes_cabin_types AS rct JOIN tickets AS t ON rct.cabin_type_id = t.cabin_type_id
    JOIN flights AS f ON t.flight_id = t.flight_id
        JOIN routes AS r ON r.route_id = rct.route_id
WHERE r.route_id = f.route_id)
SET @max_price = (SELECT rct.price * 1.2 AS top_price
FROM routes_cabin_types AS rct JOIN tickets AS t ON rct.cabin_type_id = t.cabin_type_id
    JOIN flights AS f ON t.flight_id = t.flight_id
        JOIN routes AS r ON r.route_id = rct.route_id
WHERE r.route_id = f.route_id)
SET @ins = (SELECT final_price FROM inserted)
IF ((@ins > @max_price) OR (@ins < @min_price))
    begin
    raiserror(15600, -1, -1, 'price is out of limits')
    rollback transaction
    end
END */ --- Cannot figure out why the tables will not join, even though we have correct syntax

/* Query #4: Create an INSTEAD OF trigger in the customers table for the INSERT and UPDATE events, 
that restricts the input or update of values in the first_name column whose length is between the shortest and longest 
length of all the values in the table for the first_name column. */
go
CREATE TRIGGER firstname_length ON customers
    INSTEAD OF INSERT, UPDATE
    AS
    set nocount on
    DECLARE @shortest INTEGER, @longest INTEGER, @ins INTEGER
    SET @shortest = (SELECT TOP 1 LEN(first_name) from customers ORDER BY LEN(first_name) ASC)
    SET @longest = (SELECT TOP 1 LEN(first_name) from customers ORDER BY LEN(first_name) DESC)
    SET @ins = (SELECT LEN(first_name) FROM inserted)
        IF @ins < @longest AND @ins > @shortest
            begin
                raiserror(15600,-1,-1,'name is between shortest and longest first names in database')
                rollback transaction
            end
        ELSE
        INSERT INTO customers(inserted.customer_id, inserted.first_name, inserted.last_name, inserted.birth_date, inserted.start_date, inserted.email,
        inserted.phone1, inserted.phone2, inserted.address_line1, inserted.address_line2, inserted.zipcode_id, inserted.city_state_id)


--INSERT INTO customers values(5002, 'aaaa', 'sdfdf', '1999-01-01', '2012-05-05', 'hello@yahoo.com', 'F', '(234) 8997111', '', '321 help ave', 'Tampa - FL 33613', 10903,2066)
SELECT * FROM customers ORDER BY customer_id DESC;

/* Query #5: Using the following table, you are asked to create an automatic audit system 
for the INSERT, UPDATE and DELETE events using AFTER triggers for the planes table. 
•	In the INSERT event, each column inserted (for each row) must generate a single row in the tb_audit table
•	In the UPDATE event, each column updated must generate a single row in the tb_audit table
•	In the DELETE event, each column deleted (for each row) must generate a single row in the tb_audit table

create table tb_audit
(
aud_id			int identity,	--autogenerated identifier
aud_station		varchar(50),	--name of the computer from which the operation was done
aud_operation		varchar(50),	--type of operation: INSERT, UPDATE or DELETE
aud_date		date,		--date of the operation
aud_time		time,		--time of the operation
aud_username		varchar(50),	--SQL Server login name used for the operation
aud_table		varchar(50),	--table in which the operation was performed
aud_identifier_id	varchar(50),	--value of the id of the tuple affected by the operation
aud_column		varchar(50),	--name of the column affected by the operation
aud_before		varchar(max),	--value of the column before the operation
aud_after		varchar(max)	--value of the column after the operation
) */
if object_id ('tb_audit') is not null
drop table tb_audit
go
 
create table tb_audit
(
aud_id          int identity,   
aud_station     varchar(50),    
aud_operation   varchar(50),    
aud_date        date,       
aud_time        time,       
aud_username    varchar(50),    
aud_table       varchar(50),    
aud_identifier_id   varchar(50),    
aud_column      varchar(50),    
aud_before      varchar(max),   
aud_after       varchar(max)    
)
 
go 
CREATE TRIGGER AutAud on planes 
after insert, update, delete
AS
set nocount on
begin
    if exists(select * from inserted) AND not exists(select * from deleted)
    begin
        print 'INSERT'
        INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
        SELECT 
            HOST_NAME(), 'INSERT', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'plane_id', NULL, plane_id 
            FROM inserted
        INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
        SELECT 
            HOST_NAME(), 'INSERT', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'fabrication_date', NULL, fabrication_date 
            FROM inserted
        INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
        SELECT 
            HOST_NAME(), 'INSERT', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'first_use_date', NULL, first_use_date
            FROM inserted
        INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
        SELECT 
            HOST_NAME(), 'INSERT', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'brand', NULL, brand
            FROM inserted
        INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
        SELECT 
            HOST_NAME(), 'INSERT', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'model', NULL, model
            FROM inserted
        INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
        SELECT 
            HOST_NAME(), 'INSERT', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'capacity', NULL, capacity
            FROM inserted
    END
 
ELSE IF exists (select * from inserted) and exists (select * from deleted)
    Begin
        Print 'UPDATE'
        Declare @temporalinserted table(
        Id INT identity,
        Plane_id INT,
        Fabrication_date date,
        First_use_date date,
        Brand VARCHAR(50),
        Model VARCHAR(50),
        Capacity INT);
        
        Declare @temporaldeleted table(
        Id INT identity,
        Plane_id INT,
        Fabrication_date date,
        First_use_date date,
        Brand VARCHAR(50),
        Model VARCHAR(50),
        Capacity INT);
        
        INSERT INTO @temporalinserted (plane_id, fabrication_date, first_use_date, brand, model, capacity)
        SELECT
        plane_id, fabrication_date, first_use_date, brand, model, capacity
        FROM inserted
        INSERT INTO @temporaldeleted (plane_id, fabrication_date, first_use_date, brand, model, capacity)
        SELECT
        plane_id, fabrication_date, first_use_date, brand, model, capacity
        FROM deleted
    
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'UPDATE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', ti.fabrication_date, 'plane_id', td.plane_id, ti.plane_id 
        FROM @temporalinserted ti JOIN @temporaldeleted td
        ON ti.id = td.id
        WHERE td.plane_id != ti.plane_id
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'UPDATE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', ti.fabrication_date, 'fabrication_date', td.fabrication_date, ti.fabrication_date
        FROM @temporalinserted ti JOIN @temporaldeleted td
        ON ti.id = td.id
        WHERE td.fabrication_date != ti.fabrication_date
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'UPDATE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', ti.first_use_date, 'first_use_date', td.first_use_date, ti.first_use_date
        FROM @temporalinserted ti JOIN @temporaldeleted td
        ON ti.id = td.id
        WHERE td.first_use_date != ti.first_use_date
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'UPDATE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', ti.brand, 'brand', td.brand, ti.brand
        FROM @temporalinserted ti JOIN @temporaldeleted td
        ON ti.id = td.id
        WHERE td.brand != ti.brand
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'UPDATE', GETDATE(), GETDATE(), SYSTEM_USER, 'planes', ti.model, 'model', td.model, ti.model
        FROM @temporalinserted ti JOIN @temporaldeleted td
        ON ti.id = td.id
        WHERE td.model != ti.model
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'UPDATE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', ti.capacity, 'capacity', td.capacity, ti.capacity
        FROM @temporalinserted ti JOIN @temporaldeleted td
        ON ti.id = td.id
        WHERE td.capacity != ti.capacity
    End
 
ELSE IF exists (select * from deleted) and not exists (select * from inserted)
    Begin
        Print 'DELETE'
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'DELETE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'plane_id', plane_id, NULL
        FROM deleted
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'DELETE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'fabrication_date', fabrication_date, NULL
        FROM deleted
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'DELETE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'first_use_date', first_use_date, NULL
        FROM deleted
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'DELETE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'brand', brand, NULL
        FROM deleted
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'DELETE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'model', model, NULL
        FROM deleted
    INSERT INTO tb_audit (aud_station, aud_operation, aud_date, aud_time, aud_username, aud_table, aud_identifier_id, aud_column, aud_before, aud_after)
    SELECT 
        HOST_NAME(), 'DELETE', GETDATE(), CONVERT(TIME, GETDATE()), SYSTEM_USER, 'planes', plane_id, 'capacity', capacity, NULL
        FROM deleted
    END
 
END

/* Query #6: Create a view that shows the following columns
•	customer_id column (customers table)
•	first_name column (customers table)
•	last_name column (customers table)
•	birth_date column (customers table)
•	current age (from birth_date column) (customers table)
•	city name (from name column) (cities_states table)

Only return the top 100 first customers ordered by current age in ascendent order and birth_date in descendent order*/

go
CREATE VIEW CustomerInfo AS
SELECT TOP 100 cu.customer_id AS Customer_ID, cu.first_name AS F_Name, cu.last_name AS L_Name, cu.birth_date AS Birth_Date, DATEDIFF(YEAR, cu.birth_date, GetDate()) AS Age, cs.name AS City_State
FROM customers As cu 
		JOIN cities_states AS cs ON cs.city_state_id = cu.city_state_id
ORDER BY Age ASC, Birth_Date DESC;

/* Query #7: Create a view on that shows the following columns
•	route_id column (routes table)
•	name of the city of origin (cities_states table)
•	name of the city of destination (cities_states table)
•	id of the weekday (weekdays table)
•	name of the weekday (weekdays table)
•	number of flights made by customers in 2016 and 2017

Only return the top 3 routes for each day of the week in descendent order by number of flights made by customers in 2016 and 2017*/
go
CREATE VIEW top_routes AS
SELECT TOP 150 routes, origin, destination, day_id, weekday, num_flights FROM
((SELECT r.route_id AS routes, cs.name AS origin, NULL AS destination, wd.weekday_id AS day_id , wd.name AS weekday, COUNT(*) as num_flights
FROM routes AS r JOIN cities_states AS cs ON cs.city_state_id = r.city_state_id_origin
    JOIN weekdays AS wd ON r.weekday_id = wd. weekday_id
        JOIN flights AS f ON f.route_id = r.route_id
            JOIN tickets AS t ON f.flight_id = t.flight_id
WHERE year(t.boarding_date) = 2016 OR year(t.boarding_date) = 2017
GROUP BY r.route_id, cs.name, wd.weekday_id, wd.name)
UNION
(SELECT r.route_id AS routes, NULL AS origin, cs.name AS destination, wd.weekday_id AS day_id, wd.name AS weekday, COUNT(*) as num_flights
FROM routes AS r JOIN cities_states AS cs ON cs.city_state_id = r.city_state_id_destination
    JOIN weekdays AS wd ON r.weekday_id = wd. weekday_id
        JOIN flights AS f ON f.route_id = r.route_id
            JOIN tickets AS t ON f.flight_id = t.flight_id
WHERE year(t.boarding_date) = 2016 OR year(t.boarding_date) = 2017
GROUP BY r.route_id, cs.name, wd.weekday_id, wd.name))a
ORDER BY num_flights DESC;

/* Query #8: Create a view on that shows the following columns
•	name (cities_states table)
•	number of flights in 2016 and 2017 by customers whose address belong to that city
•	number of flights in 2016 and 2017 by male customers whose address belong to that city
•	number of flights in 2016 and 2017 by female customers whose address belong to that city

Only return rows from the top 20 first cities in descendent order by number of flights in 2016 and 2017 by customers whose 
address belong to that city*/
go
CREATE VIEW cities_and_address AS
SELECT TOP 20 cities, all_customers, male_customers, female_customers FROM
(SELECT cs.name AS cities, COUNT(*) AS all_customers, NULL AS male_customers, NULL AS female_customers
FROM cities_states AS cs JOIN customers AS c ON cs.city_state_id = c.city_state_id
    JOIN tickets AS t ON c.customer_id = t.customer_id
WHERE (year(t.boarding_date) = 2016 OR year(t.boarding_date) = 2017)
GROUP BY cs.name
UNION
SELECT cs.name AS cities, NULL AS all_customers, COUNT(*) AS male_customers, NULL AS female_customers
FROM cities_states AS cs JOIN customers AS c ON cs.city_state_id = c.city_state_id
    JOIN tickets AS t ON c.customer_id = t.customer_id
WHERE (year(t.boarding_date) = 2016 OR year(t.boarding_date) = 2017) AND c.gender = 'M'
GROUP BY cs.name
UNION
SELECT cs.name AS cities, NULL AS all_customers, NULL AS male_customers, COUNT(*) AS female_customers
FROM cities_states AS cs JOIN customers AS c ON cs.city_state_id = c.city_state_id
    JOIN tickets AS t ON c.customer_id = t.customer_id
WHERE (year(t.boarding_date) = 2016 OR year(t.boarding_date) = 2017) AND c.gender = 'F'
GROUP BY cs.name
)a
ORDER BY all_customers DESC

/* Query #9: Create a view on that shows the following columns
•	name (cities_states table)
•	number of customers that flew in 2016 and 2017 whose address belong to that city
•	number of flights in 2016 and 2017 by customers whose address belong to that city
•	age group, which is a column that classifies customers in 5 groups: 25 or younger, 26 to 40, 41 to 55, 56 to 70 and 71 or older.

Only return customers from the top 3 first cities by each age group in descendent order by number of customers 
that flew in 2016 and 2017 whose address belong to that city and by number of flights in 2016 and 2017 by 
customers whose address belong to that city. */

go
CREATE VIEW age_groups_and_cities AS
SELECT TOP 224 age_grp, city_name, customers_cities, customers_flights FROM 
((SELECT CASE
WHEN DATEDIFF(year, c.birth_date, getdate()) < 26 THEN '25 or younger'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 26 AND DATEDIFF(year, c.birth_date, getdate()) < 41 THEN '26 ot 40'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 41 AND DATEDIFF(year, c.birth_date, getdate()) < 56 THEN '41 to 55'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 56 AND DATEDIFF(year, c.birth_date, getdate()) < 71 THEN '56 to 70'
ELSE '71 and older'
end
AS age_grp, cs.name AS city_name, COUNT(*) as customers_cities, NULL AS customers_flights
FROM customers AS c JOIN cities_states AS cs ON cs.city_state_id = c.city_state_id
        JOIN tickets AS t ON t.customer_id = c.customer_id
WHERE year(t.boarding_date) = 2016 OR year(t.boarding_date) = 2017
GROUP BY cs.name, CASE
WHEN DATEDIFF(year, c.birth_date, getdate()) < 26 THEN '25 or younger'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 26 AND DATEDIFF(year, c.birth_date, getdate()) < 41 THEN '26 ot 40'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 41 AND DATEDIFF(year, c.birth_date, getdate()) < 56 THEN '41 to 55'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 56 AND DATEDIFF(year, c.birth_date, getdate()) < 71 THEN '56 to 70'
ELSE '71 and older'
end)
UNION
(SELECT CASE
WHEN DATEDIFF(year, c.birth_date, getdate()) < 26 THEN '25 or younger'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 26 AND DATEDIFF(year, c.birth_date, getdate()) < 41 THEN '26 ot 40'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 41 AND DATEDIFF(year, c.birth_date, getdate()) < 56 THEN '41 to 55'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 56 AND DATEDIFF(year, c.birth_date, getdate()) < 71 THEN '56 to 70'
ELSE '71 and older'
end
AS age_grp, cs.name AS city_name, NULL AS customers_cities, COUNT(*) AS customers_flights
    FROM customers AS c JOIN cities_states AS cs ON c.city_state_id = cs.city_state_id
WHERE year(c.start_date) = 2016 OR year(c.start_date) = 2017
GROUP BY cs.name, CASE
WHEN DATEDIFF(year, c.birth_date, getdate()) < 26 THEN '25 or younger'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 26 AND DATEDIFF(year, c.birth_date, getdate()) < 41 THEN '26 ot 40'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 41 AND DATEDIFF(year, c.birth_date, getdate()) < 56 THEN '41 to 55'
WHEN DATEDIFF(year, c.birth_date, getdate()) >= 56 AND DATEDIFF(year, c.birth_date, getdate()) < 71 THEN '56 to 70'
ELSE '71 and older'
end))a
ORDER BY customers_cities DESC, customers_flights DESC

/* Query #10: You are asked to create the indicated number of constraints
(you can decide to use either check, unique or default) that satisfies the current data on each of the following tables: 

table_name		columns		constraints
employees		17			8
customers		13			6
tickets			13			6
locations		7			3
planes			6			3
flights			6			3
routes			6			3
discounts		6			3
*/

ALTER TABLE employees ADD
CONSTRAINT phone1_len CHECK(LEN(phone1) = 13),
CONSTRAINT phone2_len CHECK(LEN(phone2) = 13 OR phone2 IS NULL),
CONSTRAINT ages CHECK(datediff(year, birth_date, hire_date) > 0),
CONSTRAINT emp_id_check CHECK(employee_id > 0),
CONSTRAINT ssn_check CHECK(LEN(ssn) = 11),
CONSTRAINT addresses_check_emp CHECK(address_line1 IS NOT NULL),
CONSTRAINT oldest_possible CHECK(year(birth_date) > 1950),
CONSTRAINT city_id_def DEFAULT 2066 FOR city_state_id;

ALTER TABLE customers ADD
CONSTRAINT date_check CHECK((SELECT year(start_date) FROM customers) > 2008),
CONSTRAINT cust_id_check CHECK((SELECT customer_id FROM customers) > 0),
CONSTRAINT phone2_val DEFAULT NULL FOR phone2,
CONSTRAINT phone2_un UNIQUE(phone2),
CONSTRAINT age_check CHECK((SELECT datediff(year, birth_date, getdate()) FROM customers) > 18),
CONSTRAINT addresses_check_cust CHECK(NOT EXISTS(SELECT * FROM customers WHERE address_line1 IS NULL) AND NOT EXISTS(SELECT * FROM customers WHERE address_line2 IS NULL));

ALTER TABLE tickets ADD
CONSTRAINT price_cap CHECK(final_price > 100),
CONSTRAINT ticket_id_positive CHECK(ticket_id > 0),
CONSTRAINT verify_cabin_type_id CHECK(cabin_type_id > 0),
CONSTRAINT verify_cabin_type_id2 CHECK(cabin_type_id < 3),
CONSTRAINT date_check1 CHECK(purchase_date <= boarding_date),
CONSTRAINT def_price DEFAULT 180 FOR final_price;

ALTER TABLE locations ADD
CONSTRAINT location_id_positive CHECK(location_id > 0),
CONSTRAINT zipcode_len CHECK(LEN(zipcode_id) = 5),
CONSTRAINT citystate_len CHECK(LEN(city_state_id) < 6); --- From cities_states, the length is between 1 and 5, inclusive

ALTER TABLE planes ADD
CONSTRAINT plane_id_positive CHECK(plane_id > 0),
CONSTRAINT model_len CHECK(LEN(model) = 5),
CONSTRAINT date_check2 CHECK(fabrication_date < first_use_date);

ALTER TABLE flights ADD
CONSTRAINT flight_time_check CHECK(start_time_actual < end_time_actual),
CONSTRAINT flight_date_check CHECK(DATEPART(YEAR,date) > 2015),
CONSTRAINT flight_id_positive CHECK(flight_id > 0);

ALTER TABLE routes ADD
CONSTRAINT week_id DEFAULT 6 FOR weekday_id,
CONSTRAINT route_const CHECK(route_id > 0),
CONSTRAINT time_check DEFAULT '06:00:00' FOR start_time;

ALTER TABLE discounts ADD
CONSTRAINT effective_date CHECK(year(start_date) > 2020),
CONSTRAINT percentage_check UNIQUE(percentage),
CONSTRAINT obs_description DEFAULT 'Authorization Required' FOR observations;
